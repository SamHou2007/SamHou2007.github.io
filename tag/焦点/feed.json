{
    "version": "https://jsonfeed.org/version/1",
    "title": "SamHou's blog • All posts by \"焦点\" tag",
    "description": "A blog",
    "home_page_url": "https://blog.samhou.top",
    "items": [
        {
            "id": "https://blog.samhou.top/Csharp%E5%BC%BA%E5%88%B6%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E7%84%A6%E7%82%B9(%E5%89%8D%E5%8F%B0%E7%AA%97%E5%8F%A3)/",
            "url": "https://blog.samhou.top/Csharp%E5%BC%BA%E5%88%B6%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E7%84%A6%E7%82%B9(%E5%89%8D%E5%8F%B0%E7%AA%97%E5%8F%A3)/",
            "title": "Csharp强制设置系统焦点(前台窗口)",
            "date_published": "2023-01-27T01:01:20.000Z",
            "content_html": "<h2 id=\"系统焦点\"><a href=\"#系统焦点\" class=\"headerlink\" title=\"系统焦点\"></a>系统焦点</h2><p>在Windows中，系统的焦点就是当前处于前台的窗口。通过设置焦点，可以控制用户正在使用的应用程序。这里以winform应用为例。</p>\n<h2 id=\"Api调用\"><a href=\"#Api调用\" class=\"headerlink\" title=\"Api调用\"></a>Api调用</h2><p>C#需要调用Win32 Api才可以控制焦点，这里用到的是user32.dll中的SetForegroundWindow()函数</p>\n<p>在微软提供的文档中[1]，可以看到C++里的用法：</p>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">SetForegroundWindow</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in] HWND hWnd<span class=\"comment\">//窗口句柄</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre>\n\n<p>C#里没有HWND类型，与之对应的是IntPtr类型，所以可以这样导入Api[2]</p>\n<pre class=\"highlight\"><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.InteropServices;<span class=\"comment\">//这是调用所必须的</span></span><br><span class=\"line\">[<span class=\"meta\">DllImport(<span class=\"string\">&quot;user32.dll&quot;</span>)</span>]<span class=\"comment\">//调用dll</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">extern</span> <span class=\"built_in\">bool</span> <span class=\"title\">SetForegroundWindow</span>(<span class=\"params\">IntPtr handle</span>)</span>;<span class=\"comment\">//这个函数签名必须和文档一模一样</span></span><br></pre>\n\n<p>下面来调用导入的内容（以设置edge浏览器为例子）</p>\n<pre class=\"highlight\"><span class=\"line\">Process[] processes = Process.GetProcessesByName(<span class=\"string\">&quot;msedge&quot;</span>);<span class=\"comment\">//查找edge浏览器进程</span></span><br><span class=\"line\">IntPtr handle = processes[<span class=\"number\">0</span>].MainWindowHandle;<span class=\"comment\">//获取主窗口句柄</span></span><br><span class=\"line\">SetForegroundWindow(handle);</span><br></pre>\n\n<p>但是，文档上指出这样设置需要满足几个条件中的任意一个：</p>\n<blockquote>\n<p>此过程是前台进程。&#x2F;进程由前台进程启动。&#x2F;进程收到了最后一个输入事件。&#x2F;没有前台进程。&#x2F;正在调试该过程。&#x2F;前台进程不是新式应用程序或“开始”屏幕。&#x2F;前台未锁定， (请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/desktop/api/winuser/nf-winuser-locksetforegroundwindow\">LockSetForegroundWindow</a>) 。&#x2F;前台锁定超时已过期， (在 <a href=\"https://learn.microsoft.com/zh-cn/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa\">SystemParametersInfo</a>) 中看到<strong>SPI_GETFOREGROUNDLOCKTIMEOUT</strong>。&#x2F;没有活动菜单。&#x2F;当用户使用另一个窗口时，应用程序无法强制将窗口强制到前台。 相反，Windows 会闪烁窗口的任务栏按钮以通知用户。</p>\n</blockquote>\n<p>这样就不能说是强制设置了（注意，调试程序时系统允许强制设置，但只要离开调试器，就不行了），所以下面给出一个特别的方法。</p>\n<h2 id=\"强制设置\"><a href=\"#强制设置\" class=\"headerlink\" title=\"强制设置\"></a>强制设置</h2><p>Windows中，只要是新启动的窗口，总是能够获得系统的焦点。所以只要让程序重新启动，就能拿到焦点，变成前台进程，此时就可以设置焦点，达到强制的效果。</p>\n<p>这里还用到了另一个Api <code>GetForegroundWindow()</code>用于获取当前焦点[3]，调用方式同上，此处不再解释。</p>\n<pre class=\"highlight\"><span class=\"line\">[<span class=\"meta\">DllImport(<span class=\"string\">&quot;user32.dll&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">extern</span> IntPtr <span class=\"title\">GetForegroundWindow</span>()</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">Process[] processes = Process.GetProcessesByName(<span class=\"string\">&quot;msedge&quot;</span>);</span><br><span class=\"line\">IntPtr handle = processes[<span class=\"number\">0</span>].MainWindowHandle;</span><br><span class=\"line\">SetForegroundWindow(handle);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (handle!=GetForegroundWindow())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     Process.Start(Application.ExecutablePath);</span><br><span class=\"line\">     Environment.Exit(<span class=\"number\">0</span>);<span class=\"comment\">//重启</span></span><br><span class=\"line\">&#125;</span><br></pre>\n\n<p>注意，该方法仅30%成功率，若连续10次重启仍未获得焦点，建议放弃(</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>[1] <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setforegroundwindow\">https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setforegroundwindow</a></p>\n<p>[2] <a href=\"https://www.cnblogs.com/code1992/p/5965997.html\">https://www.cnblogs.com/code1992/p/5965997.html</a></p>\n<p>[3] <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getforegroundwindow\">https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getforegroundwindow</a></p>\n",
            "tags": [
                "csharp",
                "窗口控制",
                "焦点"
            ]
        }
    ]
}