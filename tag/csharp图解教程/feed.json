{
    "version": "https://jsonfeed.org/version/1",
    "title": "SamHou's blog • All posts by \"csharp图解教程\" tag",
    "description": "SamHou 的一个博客，包括技术文章，小说和生活学习方法分享。",
    "home_page_url": "https://blog.samhou.top",
    "items": [
        {
            "id": "https://blog.samhou.top/Csharp%E6%8E%A5%E5%8F%A3%E8%BF%9B%E9%98%B6/",
            "url": "https://blog.samhou.top/Csharp%E6%8E%A5%E5%8F%A3%E8%BF%9B%E9%98%B6/",
            "title": "Csharp接口进阶",
            "date_published": "2022-12-30T13:12:24.000Z",
            "content_html": "<p>在<a href=\"/Csharp%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/\" title=\"这篇文章\">这篇文章</a>里，曾经讲解过C#接口的基本概念。掌握这些基本概念后，本文将补充一个进阶内容。</p>\n<h2 id=\"显式接口成员实现\"><a href=\"#显式接口成员实现\" class=\"headerlink\" title=\"显式接口成员实现\"></a>显式接口成员实现</h2><ul>\n<li>该功能用于为同一个类中实现的不同接口创建不同的方法（方法名称相同）</li>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">I1</span>&#123;<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method</span>(<span class=\"params\"><span class=\"built_in\">string</span> s</span>)</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">I2</span>&#123;<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method</span>(<span class=\"params\"><span class=\"built_in\">string</span> s</span>)</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:<span class=\"title\">I1</span>,<span class=\"title\">I2</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"title\">void</span> <span class=\"title\">I1.Method</span>(<span class=\"title\">string</span> <span class=\"title\">s</span>)&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> I2.Method(<span class=\"built_in\">string</span> s)&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当以上面的方式来创建类中的方法时，仅能通过接口引用访问该方法，无法通过类的引用来访问，即使是同一个类中的方法也不行</li>\n<li>针对以上问题，可以通过强制转换来进行，举个例子：<code>((I1)MyClass1).Method</code></li>\n</ul>\n",
            "tags": [
                "csharp",
                "csharp图解教程"
            ]
        }
    ]
}