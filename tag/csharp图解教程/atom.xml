<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.samhou.top</id>
    <title>SamHou&#39;s blog • Posts by &#34;csharp图解教程&#34; tag</title>
    <link href="https://blog.samhou.top" />
    <updated>2022-12-30T13:12:24.000Z</updated>
    <category term="AI" />
    <category term="winform" />
    <category term="csharp" />
    <category term="窗口控制" />
    <category term="焦点" />
    <category term="csharp图解教程" />
    <category term="hfc" />
    <category term="小说" />
    <category term="English" />
    <category term="obsidian" />
    <category term="hexo" />
    <category term="windows" />
    <category term="UAC" />
    <category term="qnap" />
    <category term="rss" />
    <category term="任务计划程序" />
    <category term="Steam" />
    <category term="手机游戏" />
    <category term="电脑游戏" />
    <category term="单机游戏" />
    <category term="网络游戏" />
    <category term="蔚蓝档案" />
    <category term="科幻" />
    <category term="拖延症" />
    <category term="学习方法" />
    <category term="Bing" />
    <category term="Gal" />
    <category term="同人" />
    <category term="夏日口袋" />
    <category term="象征" />
    <category term="规则" />
    <category term="css" />
    <category term="flexbox" />
    <category term="web" />
    <entry>
        <id>https://blog.samhou.top/Csharp%E6%8E%A5%E5%8F%A3%E8%BF%9B%E9%98%B6/</id>
        <title>Csharp接口进阶</title>
        <link rel="alternate" href="https://blog.samhou.top/Csharp%E6%8E%A5%E5%8F%A3%E8%BF%9B%E9%98%B6/"/>
        <content type="html">&lt;p&gt;在&lt;a href=&#34;/Csharp%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/&#34; title=&#34;这篇文章&#34;&gt;这篇文章&lt;/a&gt;里，曾经讲解过C#接口的基本概念。掌握这些基本概念后，本文将补充一个进阶内容。&lt;/p&gt;
&lt;h2 id=&#34;显式接口成员实现&#34;&gt;&lt;a href=&#34;#显式接口成员实现&#34; class=&#34;headerlink&#34; title=&#34;显式接口成员实现&#34;&gt;&lt;/a&gt;显式接口成员实现&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;该功能用于为同一个类中实现的不同接口创建不同的方法（方法名称相同）&lt;/li&gt;
&lt;li&gt;语法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;I1&lt;/span&gt;&amp;#123;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Method&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; s&lt;/span&gt;)&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;I2&lt;/span&gt;&amp;#123;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Method&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; s&lt;/span&gt;)&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyClass&lt;/span&gt;:&lt;span class=&#34;title&#34;&gt;I1&lt;/span&gt;,&lt;span class=&#34;title&#34;&gt;I2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;I1.Method&lt;/span&gt;(&lt;span class=&#34;title&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;s&lt;/span&gt;)&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; I2.Method(&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; s)&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;当以上面的方式来创建类中的方法时，仅能通过接口引用访问该方法，无法通过类的引用来访问，即使是同一个类中的方法也不行&lt;/li&gt;
&lt;li&gt;针对以上问题，可以通过强制转换来进行，举个例子：&lt;code&gt;((I1)MyClass1).Method&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="csharp" />
        <category term="csharp图解教程" />
        <updated>2022-12-30T13:12:24.000Z</updated>
    </entry>
</feed>
