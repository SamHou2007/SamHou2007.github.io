{
    "version": "https://jsonfeed.org/version/1",
    "title": "SamHou's blog • All posts by \"winform\" tag",
    "description": "SamHou 的一个博客，包括技术文章，小说和生活学习方法分享。",
    "home_page_url": "https://blog.samhou.top",
    "items": [
        {
            "id": "https://blog.samhou.top/Winform%20Csharp%E5%A4%9A%E6%98%BE%E7%A4%BA%E5%99%A8%E7%AA%97%E5%8F%A3%E6%8E%A7%E5%88%B6%E8%AF%A6%E8%A7%A3/",
            "url": "https://blog.samhou.top/Winform%20Csharp%E5%A4%9A%E6%98%BE%E7%A4%BA%E5%99%A8%E7%AA%97%E5%8F%A3%E6%8E%A7%E5%88%B6%E8%AF%A6%E8%A7%A3/",
            "title": "Winform C#多显示器窗口控制详解",
            "date_published": "2023-12-08T07:12:38.000Z",
            "content_html": "<p>写Winform程序的时候，有将一个窗口放置到特定的显示器，并且全屏的需求。于是借此机会，好好研究了一番这个Screen类[1]，总结了一些方法。</p>\n<h2 id=\"Windows的窗口逻辑\"><a href=\"#Windows的窗口逻辑\" class=\"headerlink\" title=\"Windows的窗口逻辑\"></a>Windows的窗口逻辑</h2><p>首先我们需要知道窗口定位的逻辑。以2个窗口为例，下面的图片展示了显示器和坐标的对应关系。注意，使用深色模式可能看不清，可以点击上方的切换按钮切换为浅色。</p>\n<p><img src=\"https://img.samhou.top/1702026494796.png\" alt=\"显示器与坐标对应\"></p>\n<p>可以看到，连接多个显示器后，每个显示器的每个点都有一个唯一的坐标。我们要做的，就是把Form的坐标设置到显示器上面去。</p>\n<h2 id=\"获取显示器列表\"><a href=\"#获取显示器列表\" class=\"headerlink\" title=\"获取显示器列表\"></a>获取显示器列表</h2><p>首先确保引用了<code>using System.Windows.Forms;</code>，这样才有Screen类可以用。</p>\n<p>文档指出，可以用<code>Screen.AllScreens</code>获取所有显示器的数组。那么这个里面有什么呢？我们来看看文档是怎么说的：</p>\n<blockquote>\n<p>Property Value<br><a href=\"https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.screen?view=windowsdesktop-8.0\">Screen</a>[]<br>An array of type <a href=\"https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.screen?view=windowsdesktop-8.0\">Screen</a>, containing all displays on the system.</p>\n</blockquote>\n<p>也就是说，返回的数组是个Screen数组。数组里面每一个元素都是个Screen对象，分别对应用户的每个显示设备。因此，我们可以通过这些对象来访问每个显示器。比如：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Screen scr1=Screen.AllScreens[<span class=\"number\">0</span>] <span class=\"comment\">//获取第1个显示器</span></span><br><span class=\"line\">Screen scr2=Screen.AllScreens[<span class=\"number\">1</span>]<span class=\"comment\">//第二个显示器</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置窗口位置\"><a href=\"#设置窗口位置\" class=\"headerlink\" title=\"设置窗口位置\"></a>设置窗口位置</h2><p>为了设定窗口位置，我们需要知道一个显示器左上角对应的坐标，这样才可以把窗口放进去。</p>\n<p>比如，以下代码可以设置Form位置为第2个显示器的左上角，然后设置窗口覆盖全屏幕（包括任务栏：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Location = Screen.AllScreens[<span class=\"number\">1</span>].Bounds.Location;<span class=\"comment\">//设定目标坐标，结合上面的图片，这里是（1920，28）</span></span><br><span class=\"line\">Width = Screen.AllScreens[<span class=\"number\">1</span>].Bounds.Width;<span class=\"comment\">//设定窗口的宽度</span></span><br><span class=\"line\">Height = Screen.AllScreens[<span class=\"number\">1</span>].Bounds.Height;<span class=\"comment\">//设定窗口高度</span></span><br></pre></td></tr></table></figure>\n\n<p>但大部分情况下，我们只需要覆盖任务栏之上的部分，因此稍作修改：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Location = Screen.AllScreens[<span class=\"number\">1</span>].WorkingArea.Location;<span class=\"comment\">//设定目标显示器</span></span><br><span class=\"line\">Width = Screen.AllScreens[<span class=\"number\">1</span>].WorkingArea.Width;<span class=\"comment\">//设定窗口的宽度</span></span><br><span class=\"line\">Height = Screen.AllScreens[<span class=\"number\">1</span>].WorkingArea.Height;<span class=\"comment\">//设定窗口高度</span></span><br></pre></td></tr></table></figure>\n\n<p>注意到了吗？这里我们用的是<code>WorkingArea</code>来获取长宽高，以及位置。<code>WorkingArea</code>不包括任务栏，所以高度较少，这两种需要看情况使用。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>[1] <a href=\"https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.screen\">System.Windows.Forms.Screen</a></p>\n",
            "tags": [
                "winform",
                "csharp",
                "窗口控制"
            ]
        },
        {
            "id": "https://blog.samhou.top/Csharp-winform%E7%AA%97%E5%8F%A3%E6%8B%96%E5%8A%A8%E8%AF%A6%E8%A7%A3/",
            "url": "https://blog.samhou.top/Csharp-winform%E7%AA%97%E5%8F%A3%E6%8B%96%E5%8A%A8%E8%AF%A6%E8%A7%A3/",
            "title": "Csharp-winform窗口拖动详解",
            "date_published": "2022-05-29T08:05:02.000Z",
            "content_html": "<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><ul>\n<li>首先，在设计器里双击增加以下三个方法，然后填入以下代码<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">private</span> Point mouseLocation;<span class=\"comment\">//表示鼠标对于窗口左上角的坐标的负数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> isDragging;<span class=\"comment\">//标识鼠标是否按下</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">MainWindow_MouseDown</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (e.Button == MouseButtons.Left)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              mouseLocation = <span class=\"keyword\">new</span> Point(-e.X, -e.Y);</span><br><span class=\"line\">              <span class=\"comment\">//表示鼠标当前位置相对于窗口左上角的坐标，</span></span><br><span class=\"line\">              <span class=\"comment\">//并取负数,这里的e是参数，</span></span><br><span class=\"line\">              <span class=\"comment\">//可以获取鼠标位置</span></span><br><span class=\"line\">              isDragging = <span class=\"literal\">true</span>;<span class=\"comment\">//标识鼠标已经按下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">MainWindow_MouseMove</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isDragging)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Point newMouseLocation = MousePosition;</span><br><span class=\"line\">              <span class=\"comment\">//获取鼠标当前位置</span></span><br><span class=\"line\">              newMouseLocation.Offset(mouseLocation.X, mouseLocation.Y);</span><br><span class=\"line\">              <span class=\"comment\">//用鼠标当前位置加上鼠标相较于窗体左上角的</span></span><br><span class=\"line\">              <span class=\"comment\">//坐标的负数，也就获取到了新的窗体左上角位置</span></span><br><span class=\"line\">              Location = newMouseLocation;<span class=\"comment\">//设置新的窗体左上角位置</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">MainWindow_MouseUp</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isDragging)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              isDragging = <span class=\"literal\">false</span>;<span class=\"comment\">//鼠标已抬起，标识为false</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><ul>\n<li>鼠标在窗体上按下时，窗体跟随鼠标，鼠标抬起时，窗体停止移动</li>\n<li>窗体的Location属性为<strong>左上角</strong>的坐标</li>\n<li>为了实现拖动，需要获取2个坐标：鼠标相较于窗体左上角的位置，以及鼠标现在的坐标</li>\n<li>举个例子：按下鼠标时，鼠标位置(300,400)，获取鼠标相较于窗体左上角位置为(150,100)，那么此时窗体位置是(150,300)，鼠标移动到(300,401)，那么此时窗体位置应该是(150,301)。也就是说，新的窗体位置就是新的鼠标位置减去一开始鼠标相较于窗体左上角位置</li>\n<li>调用.OffSet()，就是把前面的坐标加上括号里的坐标，比如上面的例子，newMouseLocation是(300,401)，mouseLocation把鼠标相较于窗体左上角位置作为负数存储，mouseLocation是(-150,-100)，那么新的newMouseLocation就是(150,301)了~</li>\n</ul>\n",
            "tags": [
                "winform"
            ]
        }
    ]
}